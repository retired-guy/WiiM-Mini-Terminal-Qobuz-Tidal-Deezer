#!/usr/bin/env python3

import upnpclient
import json
import xmltodict
import datetime
import requests
import os, sys
import re
import textwrap as tr 
from configparser import ConfigParser
from pydoc import pager
from simple_term_menu import TerminalMenu
from threading import Thread
from time import sleep

def print_there(x, y, text):
    try:
        sys.stdout.write("\x1b7\x1b[%d;%df%s\x1b8" % (x, y, text))
        sys.stdout.flush()
    except:
        pass
    
def get_nowplaying():

    dev = conf["dev"]
    max_lines=conf["lines"] - 13
    max_cols = conf["columns"] - 5
    old_title = ""
    blanks = ' ' * max_cols
    
    while True:
        try:
            ret = dev.AVTransport.GetMediaInfo(InstanceID=0)
            meta = ret["CurrentURIMetaData"]
            track = xmltodict.parse(meta)["DIDL-Lite"]["item"]
            artist = track["upnp:artist"]
            album = track["upnp:album"]
            title = track["dc:title"]
        except:
            sleep(3)
            continue

        s = f'{artist} - {album}: {title}'
        if mainMenu == True:   
            print_there(12,1,blanks)
            print_there(12,1,s[0:max_cols])
            if ret['TrackSource'] != "Tidal":
                sleep(1)
                continue
            
            if title != old_title:
                old_title = title
                track_id = track["song:id"]
                text = get_text(node="review",track_id=track_id,max_lines=max_lines)
                if text == "":
                    for i in range(0,max_lines):
                        print_there(14+i,1,blanks)
                
                print_there(14,1,text)
        else:
            old_title = ""
                
        sleep(1)
    
def do_stop():
          
    dev = conf["dev"]
          
    #### Stop the WiiM Mini
    try:
        dev.AVTransport.Stop(InstanceID=0)
    except:
        pass  

def do_prev():
          
    dev = conf["dev"]
          
    #### Previous 
    try:
        dev.AVTransport.Previous(InstanceID=0)
    except:
        pass

def do_next():
          
    dev = conf["dev"]
          
    #### Previous 
    try:
        dev.AVTransport.Next(InstanceID=0)
    except:
        pass
          
          
def do_pause():
          
    dev = conf["dev"]
          
    #### Pause the WiiM Mini
    try:
        dev.AVTransport.Pause(InstanceID=0)
    except:
        pass

def do_play():
          
    dev = conf["dev"]
          
    #### Play the WiiM Mini
    try:      
        dev.AVTransport.Play(InstanceID=0,Speed='1')
    except:
        pass
          
def do_play_query(query):

    dev = conf["dev"]
    url = f'https://api.tidal.com/v1/search/albums?countryCode={conf["country_code"]}&query={query}'
    ret = requests.get(url=url,headers=conf["headers"]).json()
    albums = ret["items"]

    album_id=albums[0]["id"]
    title=albums[0]["title"]
    list_name=title.replace('&','&amp;')

    xml = f'<?xml version="1.0"?><PlayList><ListName>{list_name}</ListName><ListInfo><SourceName>Tidal</SourceName><SearchUrl>https://api.tidal.com/v1/albums/{album_id}/tracks?countryCode={conf["country_code"]}&amp;offset=0&amp;limit=50</SearchUrl> <requestQuality>LOSSLESS</requestQuality></ListInfo></PlayList>'

    #### Stop the WiiM Mini
    dev.AVTransport.Stop(InstanceID=0)

    #### Populate the WiiM Queue
    dev.PlayQueue.CreateQueue(QueueContext=xml) 

    #### Play
    dev.PlayQueue.PlayQueueWithIndex(QueueName=list_name,Index=0)

    #print("Playing",title)

def from_title(meta):
    global conf
    list = meta.split("~")
    txt = "    ".join(list[2:])
    
    review = get_text(node="review",album_id=list[0])
    
    return(txt + "\n\n" + review)
 
def do_search(query):
    
    dev=conf['dev']
    url = f'https://api.tidal.com/v1/search/albums?countryCode={conf["country_code"]}&query={query}&limit=100'
    ret = requests.get(url=url,headers=conf["headers"]).json()
    albums = ret["items"]
    options=[]
    idx=1
    for album in albums:
        preview=[str(album["id"]),str(album["artist"]["id"]),f'Tracks: {album["numberOfTracks"]}',f'Released: {album["releaseDate"]}', f'Quality: {album["audioQuality"]}']
        preview="~".join(preview)
        
        option = f'{idx} {album["artist"]["name"]} - {album["title"]}|{preview}'
        options.append(option)
        idx = idx+1
        
        
    terminal_menu = TerminalMenu(options,
                                 clear_screen=True,
                                 title="Enter:Play Esc:Exit", 
                                 preview_command=from_title,
                                 preview_size=0.5)
                                 
    menu_entry_index = terminal_menu.show()
                 
    if menu_entry_index == None:
        return
    else:
        list_name=albums[menu_entry_index]["title"].replace("&","&amp;")
        album_id=albums[menu_entry_index]["id"]
        
        xml = f'<?xml version="1.0"?><PlayList><ListName>{list_name}</ListName><ListInfo><SourceName>Tidal</SourceName><SearchUrl>https://api.tidal.com/v1/albums/{album_id}/tracks?countryCode={conf["country_code"]}&amp;offset=0&amp;limit=50</SearchUrl> <requestQuality>LOSSLESS</requestQuality></ListInfo></PlayList>'

        #### Stop the WiiM Mini
        dev.AVTransport.Stop(InstanceID='0')

        #### Populate the WiiM Queue
        dev.PlayQueue.CreateQueue(QueueContext=xml) 

        #### Play
        dev.PlayQueue.PlayQueueWithIndex(QueueName=list_name,Index=0)

        #print("Playing:",albums[menu_entry_index]["artist"]["name"],"-",albums[menu_entry_index]["title"])

def get_text(node="",album_id=0,artist_id=0,track_id=0,max_lines=0):

    max_cols=conf["columns"]-5
                 
    if album_id==0 and artist_id==0:
        if track_id==0:         
            dev = conf["dev"]
            ret = dev.AVTransport.GetMediaInfo(InstanceID=0)
            meta = ret["CurrentURIMetaData"]
            track = xmltodict.parse(meta)["DIDL-Lite"]["item"]
            track_id = track["song:id"]
                 
            #obj = dev.AVTransport.GetMediaInfo(InstanceID='0')
            #meta = obj['CurrentURIMetaData']

            #track = json.dumps(meta).split('<song:id>')[1]
            #track_id = track.split('</song:id>')[0]

        try:
            url= f'https://api.tidal.com/v1/tracks/{track_id}?countryCode={conf["country_code"]}'
            ret = requests.get(url,headers=conf["headers"]).json()

            album_id = ret['album']['id']
            artist_id = ret['artist']['id']
        except:
            return("")
    elif node not in ["review","bio"]:
        node="review"
        
    try:
        if node == "review":
            url= f'https://api.tidal.com/v1/albums/{album_id}/review?countryCode={conf["country_code"]}'
        elif node == "bio":
            url= f'https://api.tidal.com/v1/artists/{artist_id}/bio?countryCode={conf["country_code"]}'
        else:
            return("")
        
        ret = requests.get(url,headers=conf["headers"]).json()
        text = ret['text']
        text = re.sub("[\[].*?[\]]", "", text)
        lines = tr.wrap(text,width=max_cols)
        if max_lines == 0:
            max_lines = len(lines)
        if max_lines > len(lines):
            max_lines = len(lines)
                 
        text='\n'.join(lines[0:max_lines])
        text = text.replace("<br/>","\n\n")
        return(text)
    except:
        return("")

def main():
    global conf
    global mainMenu
    
    home_dir = os.path.expanduser('~')
    config_file = os.path.join(home_dir,'.config/wiim/wiim.ini')
    config = ConfigParser()
    config.read(config_file)

    conf = {}
    conf['country_code']=config['TIDAL']['country_code']
    conf['client_id']=config['TIDAL']['client_id']
    conf['description_url'] = config['WIIM']['description_url'] 
    conf['headers'] = {"x-tidal-token":conf["client_id"]}
    conf['dev'] = upnpclient.Device(conf["description_url"])
    
    size = os.get_terminal_size()
    conf['columns'] = size.columns
    conf['lines'] = size.lines
                 
    thread = Thread(target=get_nowplaying)
    thread.daemon = True             
    thread.start()
    #thread.join()             

    while True:   
        mainMenu = True  
        options = ["[s] Search", "[b] Bio", "[r] Review", "[t] PlayThis", "[v] Prev", "[u] Pause", "[p] Play", "[n] Next", "[o] Stop", "[x] Exit"]
        terminal_menu = TerminalMenu(options,clear_screen=True,title="")
                 
        menu_entry_index = terminal_menu.show()
        mainMenu = False         

        if menu_entry_index == 1:
            text = get_text("bio")
            if text != "":
                pager(text)


        elif menu_entry_index == 2:
            text = get_text("review")
            if text != "":
                pager(text)

        elif menu_entry_index == 0:
            query = input("Search: ")
            if query != "":
                do_search(query)

        elif menu_entry_index == 3:
             query = input("Artist Album: ")
             if len(query.split()) > 3:
                do_play_query(query)

        elif menu_entry_index == 4:
            do_prev()
        
        elif menu_entry_index == 5:
            do_pause()
                 
        elif menu_entry_index == 6:
            do_play()
                 
        elif menu_entry_index == 7:
            do_next()
                 
        elif menu_entry_index == 8:
            do_stop()
                 
        else:
            exit(0)

if __name__ == "__main__":
    main()
    
